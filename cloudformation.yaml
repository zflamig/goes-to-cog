Parameters:
  GitToken:
    Type: String
    Description: GitHub OAuth Token
    MinLength: 40
    AllowedPattern: "[a-zA-Z0-9_]+"
    NoEcho: true

  GitSourceRepo:
    Type: String
    Description: GitHub Repository for this
    Default: goes-to-cog

  GitHubOrg:
    Type: String
    Description: GitHub organization 
    Default: zflamig

  GitSourceBranch:
    Type: String
    Description: GitHub Repository
    Default: main

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:5.0

  G16SNSArn:
    Type: String
    Description: G16 SNS New Objects
    Default: arn:aws:sns:us-east-1:123901341784:NewGOES16Object

  G17SNSArn:
    Type: String
    Description: G17 SNS New Objects
    Default: arn:aws:sns:us-east-1:123901341784:NewGOES17Object



Resources:
  COGArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  CleanBucketOnDelete:
    DependsOn: CleanBucketOnDeleteLambda
    Type: Custom::CleanBucket
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CleanBucketOnDeleteLambda"
          - "Arn"
      BucketName: !Ref CodePipelineArtifactBucket

  CleanBucketOnDeleteLambda:
    DependsOn: CodePipelineArtifactBucket
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile:
          !Sub |
          import json, boto3, logging
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          logger.info("delete obj: {}".format(obj))
                          s3.Object(bucket.name, obj.key).delete()

                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")            

      Handler: "index.lambda_handler"
      Runtime: python3.7
      MemorySize: 128
      Timeout: 60
      Role : !GetAtt CleanBucketOnDeleteLambdaRole.Arn

  CleanBucketOnDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Join [-, [!Ref 'AWS::StackName', 'CleanBucketOnDeleteLambdaPolicy'] ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !GetAtt CodePipelineArtifactBucket.Arn
                  - !Join
                    - "/"
                    - - !GetAtt CodePipelineArtifactBucket.Arn
                      - "*"
              - Effect: Deny
                Action:
                  - s3:DeleteBucket
                Resource: '*'
            # - Effect: Allow
            #   Action:
            #   - logs:CreateLogGroup
            #   - logs:CreateLogStream
            #   - logs:PutLogEvents
            #   Resource: '*'

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  Fn::GetAtt:
                    - CodeBuildLogs
                    - Arn
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !GetAtt EcrDockerRepository.Arn
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload


  CodeBuildLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/codebuild/${AWS::StackName}
      RetentionInDays: 3
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  DeployWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  DeployWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref DeployWaitHandle
      Timeout: "7200"

  CodeBuildProject:
    DependsOn: CodeBuildLogs
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub
          - |
            ---
            version: 0.2
            phases:
              install:
                commands:
                  - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
                  - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
              pre_build:
                  commands:
                  - printenv
                  - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                  - echo $TAG
                  - aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"
                  - docker pull $REPOSITORY_URI:latest || true
              build:
                commands:
                  - docker build --cache-from $REPOSITORY_URI:latest --tag $REPOSITORY_URI:$TAG --tag $REPOSITORY_URI:latest .
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:$TAG
                  - docker push $REPOSITORY_URI:latest
                  - curl -X PUT -H 'Content-Type:' --data-binary "{\"Status\":\"SUCCESS\",\"Reason\":\"Custom Action Deployed\",\"UniqueId\":\"CodeBuildWait\",\"Data\":\"$REPOSITORY_URI:$TAG\"}" $SIGNAL_URL
                  - aws lambda update-function-code --region us-east-1 --function-name $FUNCTION_NAME --image-uri $REPOSITORY_URI:$TAG || true
                  - printf '[{"name":"${ServiceName}","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
          - ServiceName: Worker
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: SIGNAL_URL
            Value: !Ref DeployWaitHandle
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: REGION
            Value: !Sub ${AWS::Region}
          - Name: REPOSITORY_NAME
            Value: !Ref GitSourceRepo
          - Name: REPOSITORY_BRANCH
            Value: !Ref GitSourceBranch
          - Name: FUNCTION_NAME
            Value: !Sub ${AWS::StackName}-container-lambda
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
    DependsOn:
      - CodePipelineArtifactBucket

  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOrg
                Repo: !Ref GitSourceRepo
                Branch: !Ref GitSourceBranch
                OAuthToken: !Ref GitToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

    DependsOn:
      - CodePipelineArtifactBucket
      - CodeBuildProject
      - CodePipelineServiceRole

  EcrDockerRepository:
    Type: AWS::ECR::Repository

  CleanECROnDelete:
    DependsOn: CleanECROnDeleteLambda
    Type: Custom::CleanECR
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CleanECROnDeleteLambda"
          - "Arn"
      RepositoryName: !Ref EcrDockerRepository

  CleanECROnDeleteLambda:
    DependsOn: EcrDockerRepository
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile:
          !Sub |
          import json, boto3, logging
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  repo = event['ResourceProperties']['RepositoryName']
                  logger.info("bucket: {}, event['RequestType']: {}".format(repo,event['RequestType']))
                  if event['RequestType'] == 'Delete':
                      client = boto3.client('ecr')
                      resp = client.list_images(repositoryName=repo)
                      if 'imageIds' in resp:
                        images = resp['imageIds']
                        image_ids = [imageDigest for imageDigest in images]
                        if len(image_ids) > 0:
                          client.batch_delete_image(repositoryName=repo, imageIds=image_ids)

                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")            

      Handler: "index.lambda_handler"
      Runtime: python3.7
      MemorySize: 128
      Timeout: 60
      Role : !GetAtt CleanECROnDeleteLambdaRole.Arn

  CleanECROnDeleteLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Join [ -, [!Ref 'AWS::StackName', 'CleanECROnDeleteLambdaPolicy'] ]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:ListImages
                  - ecr:batchDeleteImage
                Resource: !GetAtt EcrDockerRepository.Arn
            # - Effect: Allow
            #   Action:
            #   - logs:CreateLogGroup
            #   - logs:CreateLogStream
            #   - logs:PutLogEvents
            #   Resource: '*'

  COGLambda:
    DependsOn:
      DeployWaitCondition
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt COGLambdaRole.Arn
      FunctionName: !Sub ${AWS::StackName}-container-lambda
      PackageType: Image
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}:latest
      Timeout: 300
      MemorySize: 4096
      Environment:
        Variables:
          TARGET_BUCKET: !Ref "COGArtifactBucket"

  G16InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref G16SNSArn
      FunctionName: !GetAtt COGLambda.Arn

  G17InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref G17SNSArn
      FunctionName: !GetAtt COGLambda.Arn

  G16Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt COGLambda.Arn
      TopicArn: !Ref G16SNSArn
      FilterPolicy: 
          key:
            - prefix: "ABI-L2-CMIPF"

  COGLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:ListBucket'
                Resource:
                  - !GetAtt COGArtifactBucket.Arn
                  - !Join ['', [!GetAtt COGArtifactBucket.Arn, '/*']]

